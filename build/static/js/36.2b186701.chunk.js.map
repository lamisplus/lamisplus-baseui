{"version":3,"sources":["main/webapp/components/Laboratory/DispatchedManifest/DispatchedSamplesList.js","main/webapp/components/Typography.js","main/webapp/components/Page.js","main/webapp/actions/laboratory.js"],"names":["mapActionToProps","fetchAllLabTestOrderToday","fetchAllLabTestOrder","connect","state","patientsTestOrderList","laboratory","list","props","_useState","useState","_useState2","Object","_Users_matosky_Documents_lamis_dev_lamisplus_baseui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","loading","setLoading","useEffect","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_Page__WEBPACK_IMPORTED_MODULE_10__","title","material_table__WEBPACK_IMPORTED_MODULE_2___default","columns","field","type","filtering","isLoading","data","map","row","Id","patientId","name","firstName","lastName","date","dateEncounter","count","formDataObj","length","samplecount","actions","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","to","pathname","style","cursor","color","fontStyle","_material_ui_core_Tooltip__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_9__","aria-label","_material_ui_icons_Visibility__WEBPACK_IMPORTED_MODULE_7___default","options","headerStyle","backgroundColor","margin","selection","searchFieldStyle","width","margingLeft","exportButton","searchFieldAlignment","tagMap","h1","h2","h3","h4","h5","h6","display-1","display-2","display-3","display-4","p","lead","blockquote","Typography","_ref","TypoComp","Tag","tag","className","restProps","objectWithoutProperties","classes","classNames","defineProperty","react_default","assign","defaultProps","bem","bn","create","Page","breadcrumbs","children","b","e","components_Typography","Breadcrumb","BreadcrumbItem","_ref2","index","active","key","__webpack_require__","d","__webpack_exports__","fetchAllLabTestOrderOfPatient","createCollectedSample","dispatchedManifestSamples","sampleVerification","fetchFormById","fetchAllTestGroup","fetchAllTestsByTestGroup","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","_api__WEBPACK_IMPORTED_MODULE_1__","_types__WEBPACK_IMPORTED_MODULE_2__","react_toastify__WEBPACK_IMPORTED_MODULE_3__","onSuccess","onError","dispatch","LABSERVICECODE","axios","get","concat","baseUrl","then","response","ACTION_TYPES","payload","console","log","catch","error","id","lab_id","put","toast"],"mappings":"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","file":"static/js/36.2b186701.chunk.js","sourcesContent":["\nimport React, {useEffect, useState} from 'react';\nimport MaterialTable from 'material-table';\nimport { Link } from 'react-router-dom'\nimport { connect } from \"react-redux\";\nimport { fetchAllLabTestOrder } from \"./../../../actions/laboratory\";\nimport \"./../laboratory.css\";\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Page from './../../Page'\n\n\nconst PatientSearch = (props) => {\n    const [loading, setLoading] = useState('')\nuseEffect(() => {\n    setLoading('true');\n        const onSuccess = () => {\n            setLoading(false)\n        }\n        const onError = () => {\n            setLoading(false)     \n        }\n            props.fetchAllLabTestOrderToday(onSuccess, onError);\n}, []); //componentDidMount\n    \nfunction totalSampleConllected (test){\n        const  maxVal = []\n        //   for(var i=0; i<test.length; i++){\n        //       for (var key in test[i]) {\n        //           if (test[i][key].lab_test_order_status >=1)\n        //               maxVal.push(test[i][key])\n        //       }\n        //   }\n        //retur 2;\n    }\n \n    \n  return (\n    <Page title='Dispatched Samples '>\n      \n      <div>\n        <br/><br/>\n          <MaterialTable\n              title=\"Dispatched samples list\"\n              columns={[\n                  { title: \"Patient ID\", field: \"Id\" },\n                  {\n                    title: \"Patient Name\",\n                    field: \"name\",\n                  },\n                  { title: \"Date Order\", field: \"date\", type: \"date\" , filtering: false},          \n                  {\n                    title: \"Total Sample \",\n                    field: \"count\",\n                    filtering: false\n                  },\n                  {\n                    title: \"Sample Collected \",\n                    field: \"samplecount\",\n                    filtering: false\n                  },\n                  {\n                    title: \"Action\",\n                    field: \"actions\",\n                    filtering: false,\n                  },\n              ]}\n              isLoading={loading}\n              data={props.patientsTestOrderList.map((row) => ({\n                  Id: row.patientId,\n                  name: row.firstName +  ' ' + row.lastName,\n                  date: row.dateEncounter,\n                  count: row.formDataObj.length,\n                  samplecount: totalSampleConllected(row.formDataObj),\n                  actions:  <Link to ={{ \n                                  pathname: \"/dispatched-sample\",  \n                                  state: row\n                              }} \n                                  style={{ cursor: \"pointer\", color: \"blue\", fontStyle: \"bold\"}}\n                            >\n                                <Tooltip title=\"View Sample\">\n                                    <IconButton aria-label=\"View Sample\" >\n                                        <VisibilityIcon color=\"primary\"/>\n                                    </IconButton>\n                                </Tooltip>\n                            </Link>\n\n              }))}\n              options={{\n                  headerStyle: {\n                  backgroundColor: \"#9F9FA5\",\n                  color: \"#000\",\n                  margin: \"auto\"\n                  },\n                  selection: true,\n                  filtering: true,\n                  searchFieldStyle: {\n                      width : '300%',\n                      margingLeft: '250px',\n                  },\n                  exportButton: true,\n                  searchFieldAlignment: 'left',          \n              }}\n\n          />\n    </div>\n  </Page>\n  );\n}\n\nconst mapStateToProps = state => {\n    return {\n        patientsTestOrderList: state.laboratory.list\n    };\n};\n\nconst mapActionToProps = {\n    fetchAllLabTestOrderToday: fetchAllLabTestOrder\n};\n  \nexport default connect(mapStateToProps, mapActionToProps)(PatientSearch);","import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-5', 'p-5', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h4\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","import axios from \"axios\";\nimport { url as baseUrl , LABSERVICECODE} from \"../api\";\nimport * as ACTION_TYPES from \"./types\";\nimport { toast } from \"react-toastify\";\n\n/**\n * @Actions\n * CheckIn CRUD OPERATIONS\n * returns API response from server\n * =================================\n * fetchAll()\n * fetchById()\n * create()\n * update()\n * Delete()\n */\n\nexport const fetchAllLabTestOrder = (onSuccess, onError) => dispatch => {\n  if(LABSERVICECODE){\n  axios\n    .get(`${baseUrl}encounters/${LABSERVICECODE}/{dateStart}/{dateEnd}`)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.LABORATORY_TESTORDER,\n        payload: response.data\n      })\n      console.log(response)\n      onSuccess();\n    })\n    .catch(error => {\n      dispatch({\n        type: ACTION_TYPES.ERROR_LABORATORY_TESTORDER,\n        payload: 'Something went wrong, please try again'\n      })\n      onError();\n      console.log(error)\n    });\n}\n};\nexport const fetchAllLabTestOrderOfPatient = (id, onSuccess, onError )=> dispatch => {\n  //console.log(id)\n  if(id){\n  axios\n    .get(`${baseUrl}encounters/${id}/form-data`)\n    .then(response => {\n     \n      dispatch({\n        type: ACTION_TYPES.LABORATORY_TESTORDER_FOR_PATIENT,\n        payload: response.data\n      })\n      console.log(response.data)\n      onSuccess();\n      \n    })\n    .catch(error => {\n      dispatch({\n        type: ACTION_TYPES.ERROR_LABORATORY_TESTORDER_FOR_PATIENT,\n        payload: error\n      })\n      onError();\n      console.log(error)\n    }\n    );\n}\n};\nexport const fetchLabTestOrdersByEncounterID = (id)=> dispatch => {\n  if(id){\n  axios\n    .get(`${baseUrl}encounters/${id}`)\n    .then(response => {\n       console.log(response)\n      dispatch({\n        type: ACTION_TYPES.FETCH_ALL_TESTS_BY_ENCOUNTER_ID,\n        payload: response.data\n      })\n      //onSuccess();\n    })\n    .catch(error => {\n      dispatch({\n        type: ACTION_TYPES.ERROR_LABORATORY_TESTORDER_FOR_LAB,\n        payload: error\n      })\n   \n    }\n    );\n    }\n};\nexport const createCollectedSample = (data, lab_id, onSuccess, onError ) => dispatch => {\n\n  if(lab_id){\n    \n  axios\n    .put(`${baseUrl}form-data/${lab_id}`, data)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.CREATE_COLLECT_SAMPLE,\n        payload: response.data\n      });\n      onSuccess()\n      //toast.success(\"Sample Collection was successful\");\n    })\n    .catch(error =>{\n      \n      dispatch({\n        type: ACTION_TYPES.ERROR_CREATE_COLLECT_SAMPLE,\n        payload: error\n      })\n      onError()\n      //toast.error(\"Something went wrong, please try again\");\n      \n    });\n  }else{\n    toast.error(\"Something went wrong, please try again\");\n  }\n};\n\nexport const dispatchedManifestSamples = (data, lab_id) => dispatch => {\n\n  if(lab_id){\n    \n  axios\n    .put(`${baseUrl}form-data/${lab_id}`, data)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.CREATE_COLLECT_SAMPLE,\n        payload: response.data\n      });\n     \n    })\n    .catch(error =>{\n      \n      dispatch({\n        type: ACTION_TYPES.ERROR_CREATE_COLLECT_SAMPLE,\n        payload: error\n      })\n      \n    });\n  }else{\n    toast.error(\"Something went wrong, please try again\");\n  }\n};\nexport const sampleVerification = (data, lab_id, onSuccess, onError ) => dispatch => {\n\n  if(lab_id){\n    \n  axios\n    .put(`${baseUrl}form-data/${lab_id}`, data)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.CREATE_COLLECT_SAMPLE,\n        payload: response.data\n      });\n      onSuccess()\n      //toast.success(\"Sample verified successful\");\n      //setInterval(window.location.reload(false), 80000);\n    })\n    .catch(error =>{\n      \n      dispatch({\n        type: ACTION_TYPES.ERROR_CREATE_COLLECT_SAMPLE,\n        payload: error\n      })\n      onError()\n      toast.error(\"Something went wrong, please try again\");\n      //setInterval(window.location.reload(false), 80000);\n      //window.location.reload()\n      \n    });\n  }else{\n    toast.error(\"Something went wrong, please try again\");\n  }\n};\n\nexport const transferSample = (samples, lab_id) => dispatch => {\n \n  axios\n    .put(`${baseUrl}form-data/`, samples)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.TRANSFER_SAMPLE,\n        payload: response.data\n      });\n      //toast.success(\"Sample Transfer was successful\");\n    })\n    .catch(error =>{\n      \n      dispatch({\n        type: ACTION_TYPES.ERROR_TRANSFER_SAMPLE,\n        payload: error\n      })\n      toast.error(\"Something went wrong, please try again\");\n\n    });\n};\nexport const fetchFormById = id => dispatch => {\n  //console.log(id)\n  if(id){\n  axios\n    .get(`${baseUrl}form-data/${id}`)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.FORMDATA_FETCH_BY_ID,\n        payload: response.data\n      });\n      //console.log(\"is getting here \") \n    })\n    .catch(error => {\n      dispatch({\n        type: ACTION_TYPES.ERROR_FORMDATA_FETCH_BY_ID,\n        payload: error\n      })\n      console.log(error)\n    }\n    );\n  }\n};\n\nexport const create = data => dispatch => {\n  axios\n    .post(`${baseUrl}visits/`, data)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.CHECKIN_CREATE,\n        payload: response.data\n      });\n    })\n    .catch(error => {\n      dispatch({\n        type: ACTION_TYPES.CHECKIN_ERROR,\n        payload: \"Something went wrong, please try again\"\n      });\n    });\n};\n\nexport const update = (id, data) => dispatch => {\n  axios\n    .put(`${baseUrl}visits/${id}`, data)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.CHECKIN_UPDATE,\n        payload: response.data\n      });\n    })\n    .catch(error => {\n      dispatch({\n        type: ACTION_TYPES.CHECKIN_ERROR,\n        payload: \"Something went wrong, please try again\"\n      });\n    });\n};\n\nexport const Delete = id => dispatch => {\n  axios\n    .delete(`${baseUrl}visits/${id}`)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.CHECKIN_DELETE,\n        payload: response.data\n      });\n    })\n    .catch(error => {\n      dispatch({\n        types: ACTION_TYPES.CHECKIN_ERROR,\n        payload: \"Something went wrong, please try again\"\n      });\n    });\n};\n\nexport const fetchAllTestGroup = (onSuccess, onError) => dispatch => {\n  axios\n    .get(`${baseUrl}lab-test-groups/`)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.FETCH_ALL_TEST_GROUP,\n        payload: response.data\n      })\n      onSuccess()\n    })\n    .catch(error => {\n      dispatch({\n        type: ACTION_TYPES.LABORATORY_ERROR,\n        payload: 'Something went wrong, please try again'\n      })\n      onError(error.response)\n    })\n}\n\nexport const fetchAllTestsByTestGroup = (id, onSuccess, onError) => dispatch => {\n  axios\n    .get(`${baseUrl}lab-test-groups/${id}/lab-tests`)\n    .then(response => {\n      dispatch({\n        type: ACTION_TYPES.FETCH_ALL_TESTS_BY_TEST_GROUP,\n        payload: response.data\n      })\n      onSuccess()\n    })\n    .catch(error => {\n      dispatch({\n        type: ACTION_TYPES.LABORATORY_ERROR,\n        payload: 'Something went wrong, please try again'\n      })\n      onError(error.response)\n    })\n}\n\n"],"sourceRoot":""}